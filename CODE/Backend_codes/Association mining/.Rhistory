knitr::opts_chunk$set(echo = TRUE)
library(lubridate) # dates/times
library(arules) # mining association
library(arulesViz) # visualizing rules
library(tidyverse) # data
library(knitr) # report generation
library(gridExtra)
rm(list=ls())
library(readr)
data <- read_csv("C:/Users/jayka/Desktop/OMSA/DVA6242/Project/code/TransactDataClean_3110.csv",
col_types = cols(StockCode = col_number(),
InvoiceDate = col_datetime(format = "%Y-%m-%d %H:%M:%S")))
cdata=data[rowSums(is.na(data[,c("Invoice","StockCode")]))==0,]  # around 100 rows have NA in StockCode and hence those rows removed
cdata.head()
knitr::opts_chunk$set(echo = TRUE)
library(lubridate) # dates/times
library(arules) # mining association
library(arulesViz) # visualizing rules
library(tidyverse) # data
library(knitr) # report generation
library(gridExtra)
rm(list=ls())
library(readr)
data <- read_csv("C:/Users/jayka/Desktop/OMSA/DVA6242/Project/code/TransactDataClean_3110.csv",
col_types = cols(StockCode = col_number(),
InvoiceDate = col_datetime(format = "%Y-%m-%d %H:%M:%S")))
#data = read.csv("TransactDataClean_3110.csv")
#data = data.frame(data)
cdata=data[rowSums(is.na(data[,c("Invoice","StockCode")]))==0,]  # around 100 rows have NA in StockCode and hence those rows removed
cdata.head()
knitr::opts_chunk$set(echo = TRUE)
library(lubridate) # dates/times
library(arules) # mining association
library(arulesViz) # visualizing rules
library(tidyverse) # data
library(knitr) # report generation
library(gridExtra)
rm(list=ls())
library(readr)
data <- read_csv("C:/Users/jayka/Desktop/OMSA/DVA6242/Project/code/TransactDataClean_3110.csv",
col_types = cols(StockCode = col_number(),
InvoiceDate = col_datetime(format = "%Y-%m-%d %H:%M:%S")))
#data = read.csv("TransactDataClean_3110.csv")
#data = data.frame(data)
cdata=data[rowSums(is.na(data[,c("Invoice","StockCode")]))==0,]  # around 100 rows have NA in StockCode and hence those rows removed
#cdata.head()
#detach(package:plyr)
# transaction per month
cdata$Month = month(cdata$InvoiceDate)
cdata$Invoice = as.numeric(cdata$Invoice)
# preparing data
ddata = cdata[!duplicated(cdata[c("Invoice","StockCode")]),]  #dropping duplicates of stocks from each invoice
ddata$Invoice = as.factor(ddata$Invoice)
ddata$StockCode = as.factor(ddata$StockCode)
#creating a dataframe
ydata <-  ddata %>% group_by(Invoice) %>%
summarize(StockCode = paste(sort(unique(StockCode)),collapse=", "))
ydata$Invoice <- NULL
colnames(ydata) = c("Basket")
write.csv(ydata,"Product_Basket.csv", quote = FALSE, row.names = FALSE)
trans_format= read.transactions('Product_Basket.csv', format = 'basket', sep=',')
itemFrequencyPlot(trans_format,topN=20,type="relative")
association_rules <- apriori(trans_format, parameter = list(supp=0.005, conf=0.8,maxlen=10))
inspect(association_rules)
# Support and confidence values
support <- c(0.01, 0.005)
confid <- c(0.9, 0.8, 0.7, 0.6, 0.5)
# Empty integers
rules1 <- integer(length=5)
rules2 <- integer(length=5)
clength = length(confid)
slength = length(support)
# Length of Rules for various iteration
j=1
for (i in 1:clength) {
rules1[i] <- length(apriori(trans_format, parameter=list(sup=support[j],
conf=confid[i], target="rules")))
}
plot1=qplot(confid, rules1, geom=c("point", "line"),xlab="Confidence level", ylab="Number of rules found")
j=2
for (i in 1:clength) {
rules2[i] <- length(apriori(trans_format, parameter=list(sup=support[j],
conf=confid[i], target="rules")))
}
plot2=qplot(confid, rules2, geom=c("point", "line"),xlab="Confidence level", ylab="Number of rules found")
grid.arrange(plot1, plot2, ncol=2)
rules <- apriori(trans_format, parameter=list(sup=support[1],
conf=confid[2], target="rules"))
inspect(rules)
plot(rules, measure=c("support", "lift"), shading="confidence")
plot(rules, method="graph",control=list(layout=igraph::in_circle()))
plot(rules, method="grouped")
plot(rules, method="graph", engine='htmlwidget')
# some more ideas
#https://datascience-enthusiast.com/R/R_shiny_Tableau_treemap.html
plot(rules, engine = "htmlwidget")
plot(rules, method = "matrix", engine = "htmlwidget")
plot(rules, method = "grouped matrix", engine = "interactive")
